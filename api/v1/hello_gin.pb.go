// Code generated by github.com/varluffy/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	ginx "github.com/varluffy/rich/transport/http/gin/ginx"
	handler "github.com/xavierxcn/apiserver/internal/serve/handler"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the varluffy/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
// gin.ginx.handler.

type HelloServiceHTTPServer interface {
	Hello(context.Context, *ReqHello) (*RspHello, error)
}

func RegisterHelloServiceHTTPServer(r gin.IRouter, srv HelloServiceHTTPServer) {
	s := HelloService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type HelloService struct {
	server HelloServiceHTTPServer
	router gin.IRouter
}

func (s *HelloService) Hello_0(ctx *gin.Context) {
	var in ReqHello

	if err := ginx.ShouldBind(ctx, &in); err != nil {
		handler.SendResponse(ctx, err, nil)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request.Context(), md)
	out, err := s.server.(HelloServiceHTTPServer).Hello(newCtx, &in)
	if err != nil {
		handler.SendResponse(ctx, err, nil)
		return
	}

	handler.SendResponse(ctx, nil, out)
}

func (s *HelloService) RegisterService() {

	s.router.Handle("GET", "/hello", s.Hello_0)

}
